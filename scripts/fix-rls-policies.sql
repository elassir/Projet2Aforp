-- üîß SCRIPT SQL DE CORRECTION POUR LES POLICIES RLS
-- Ex√©cutez ce script dans Supabase Dashboard > SQL Editor

-- 1. V√©rifier l'√©tat actuel
SELECT schemaname, tablename, rowsecurity 
FROM pg_tables 
WHERE tablename = 'users';

-- 2. Lister les policies existantes
SELECT policyname, permissive, roles, cmd, qual, with_check
FROM pg_policies 
WHERE tablename = 'users';

-- 3. Supprimer les anciennes policies si elles existent
DROP POLICY IF EXISTS "users_select_own" ON users;
DROP POLICY IF EXISTS "users_insert_own" ON users;  
DROP POLICY IF EXISTS "users_update_own" ON users;
DROP POLICY IF EXISTS "Utilisateurs peuvent voir leur profil" ON users;
DROP POLICY IF EXISTS "Permettre l'insertion lors de l'inscription" ON users;
DROP POLICY IF EXISTS "Utilisateurs peuvent modifier leur profil" ON users;

-- 4. Cr√©er de nouvelles policies compatibles avec l'inscription
-- Policy pour voir son propre profil
CREATE POLICY "users_can_view_own_profile" ON users
    FOR SELECT 
    USING (auth.email() = user_email);

-- Policy pour ins√©rer son profil lors de l'inscription
-- IMPORTANT: Cette policy permet l'insertion m√™me si l'utilisateur vient de s'inscrire
CREATE POLICY "users_can_insert_own_profile" ON users
    FOR INSERT 
    WITH CHECK (
        auth.email() = user_email 
        OR 
        EXISTS (
            SELECT 1 FROM auth.users 
            WHERE auth.users.email = user_email 
            AND auth.users.email_confirmed_at IS NOT NULL
        )
    );

-- Policy pour mettre √† jour son profil
CREATE POLICY "users_can_update_own_profile" ON users
    FOR UPDATE 
    USING (auth.email() = user_email)
    WITH CHECK (auth.email() = user_email);

-- 5. Alternative: Policy plus permissive pour les tests
-- D√©commentez cette section si les policies ci-dessus ne fonctionnent pas

/*
-- D√©sactiver temporairement RLS pour les tests
ALTER TABLE users DISABLE ROW LEVEL SECURITY;

-- Ou cr√©er une policy tr√®s permissive pour les tests
CREATE POLICY "allow_all_for_testing" ON users
    FOR ALL 
    USING (true)
    WITH CHECK (true);
*/

-- 6. V√©rifier que les policies sont bien cr√©√©es
SELECT policyname, permissive, roles, cmd, qual, with_check
FROM pg_policies 
WHERE tablename = 'users';

-- 7. Test de la configuration
-- Cr√©ez un utilisateur de test depuis l'interface Supabase Auth
-- puis testez ces requ√™tes:

/*
-- Test SELECT (doit fonctionner si connect√©)
SELECT * FROM users WHERE user_email = 'votre-email@test.com';

-- Test INSERT (doit fonctionner si connect√©)
INSERT INTO users (user_email, user_nom, user_prenom, user_role) 
VALUES ('votre-email@test.com', 'Test', 'User', 'user');

-- Test UPDATE (doit fonctionner si connect√©)
UPDATE users 
SET user_nom = 'Nouveau' 
WHERE user_email = 'votre-email@test.com';
*/

-- 8. Informations sur l'utilisateur actuel (pour debug)
SELECT 
    auth.uid() as user_id,
    auth.email() as user_email,
    auth.role() as user_role;

-- ‚úÖ Script de correction termin√©
SELECT 'Policies RLS mises √† jour avec succ√®s!' as status;
